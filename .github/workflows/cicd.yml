name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  IMAGE_NAME: sample-node-app
  REGISTRY: docker.io
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Add your SonarQube token as a secret

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]  # Matrix for parallel multi-OS builds
      fail-fast: false  # Continue even if one matrix fails

    steps:
      - name: Code Checkout
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14

      - name: Install Dependencies
        run: npm install

      - name: Code Review with SonarQube
        uses: sonarsource/sonarqube-scan-action@master
        with:
          args: >
            -Dsonar.projectKey=${{ github.repository }}
            -Dsonar.host.url=https://your-sonarqube-url.com  # Replace with your SonarQube URL
            -Dsonar.login=${{ env.SONAR_TOKEN }}
        continue-on-error: true  # Error handling: Proceed if scan fails

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ${{ env.REGISTRY }}

      - name: Docker Build and Push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        env:
          DOCKER_BUILDKIT: 1  # Env var for efficient builds

  notify:
    needs: build-and-test  # Runs after build
    runs-on: ubuntu-latest
    if: always()  # Always run for notifications
    steps:
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_TITLE: 'CI/CD Pipeline ${{ github.workflow }}'
          SLACK_MESSAGE: 'Status: ${{ job.status }} | Commit: ${{ github.sha }}'
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}  # Color based on status
